#include "microphone.h"
//
// I2S Microphone sampling setup
//

QueueHandle_t samples_queue;

// Static buffer for block of samples
float samples[SAMPLES_SHORT] __attribute__((aligned(4)));

i2s_driver_install(I2S_PORT, &i2s_config, 0, NULL);

i2s_set_pin(I2S_PORT, &pin_config);

void mic_i2s_init()
{
    // Setup I2S to sample mono channel for SAMPLE_RATE * SAMPLE_BITS
    // NOTE: Recent update to Arduino_esp32 (1.0.2 -> 1.0.3)
    //       seems to have swapped ONLY_LEFT and ONLY_RIGHT channels
    const i2s_config_t i2s_config = {
        .mode = i2s_mode_t(I2S_MODE_MASTER | I2S_MODE_RX),
        .sample_rate = 48000,
        //.sample_rate = 11025, if you like
        .bits_per_sample = i2s_bits_per_sample_t(16),
        .channel_format = I2S_CHANNEL_FMT_ONLY_LEFT,
        //.communication_format = i2s_comm_format_t(I2S_COMM_FORMAT_STAND_I2S),
        .communication_format = i2s_comm_format_t(I2S_COMM_FORMAT_I2S | I2S_COMM_FORMAT_I2S_MSB),
        .intr_alloc_flags = 0,
        .dma_buf_count = 8,
        .dma_buf_len = 64,
        .use_apll = false};
    // I2S pin mapping
    const i2s_pin_config_t pin_config = {
        bck_io_num : I2S_SCK,
        ws_io_num : I2S_WS,
        data_out_num : -1, // not used
        data_in_num : I2S_SD
    };

}

//
void mic_i2s_reader_task(void *parameter)
{
	mic_i2s_init();

	// Discard first block, microphone may have startup time (i.e. INMP441 up to 83ms)
	size_t bytes_read = 0;
	i2s_read(I2S_PORT, &samples, SAMPLES_SHORT * sizeof(int32_t), &bytes_read, portMAX_DELAY);

	while (true)
	{
		// Block and wait for microphone values from I2S
		//
		// Data is moved from DMA buffers to our 'samples' buffer by the driver ISR
		// and when there is requested ammount of data, task is unblocked
		//
		// Note: i2s_read does not care it is writing in float[] buffer, it will write
		//       integer values to the given address, as received from the hardware peripheral.
		i2s_read(I2S_PORT, &samples, SAMPLES_SHORT * sizeof(SAMPLE_T), &bytes_read, portMAX_DELAY);

		TickType_t start_tick = xTaskGetTickCount();

		// Convert (including shifting) integer microphone values to floats,
		// using the same buffer (assumed sample size is same as size of float),
		// to save a bit of memory
		SAMPLE_T *int_samples = (SAMPLE_T *)&samples;
		for (int i = 0; i < SAMPLES_SHORT; i++)
			samples[i] = MIC_CONVERT(int_samples[i]);

		sum_queue_t q;
		// Apply equalization and calculate Z-weighted sum of squares,
		// writes filtered samples back to the same buffer.
		q.sum_sqr_SPL = MIC_EQUALIZER.filter(samples, samples, SAMPLES_SHORT);

		// Apply weighting and calucate weigthed sum of squares
		q.sum_sqr_weighted = WEIGHTING.filter(samples, samples, SAMPLES_SHORT);

		// Debug only. Ticks we spent filtering and summing block of I2S data
		q.proc_ticks = xTaskGetTickCount() - start_tick;

		// Send the sums to FreeRTOS queue where main task will pick them up
		// and further calcualte decibel values (division, logarithms, etc...)
		xQueueSend(samples_queue, &q, portMAX_DELAY);
	}
}


